{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Load dataset"],"metadata":{"id":"r7bUO70HoVBI"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":461},"id":"3l17lLsRl-Bj","outputId":"5c38957a-df42-4b5a-e5fb-ec0105bf4dc0"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Unnamed: 0  subject_id gender  anchor_age            admittime  \\\n","0           0    10000048      F          23  2139-09-26 14:16:00   \n","1           1    10002723      F           0  2123-10-07 23:56:00   \n","2           2    10003939      M           0  2147-01-14 09:00:00   \n","3           3    10004222      M           0  2165-12-27 17:33:00   \n","4           4    10005325      F           0  2122-08-28 08:48:00   \n","\n","                ethnicity        storetime spec_type_desc  test_seq  \\\n","0                 UNKNOWN   3/16/2138 5:10  BLOOD CULTURE       1.0   \n","1                   WHITE  6/11/2135 21:02          URINE       1.0   \n","2                 UNKNOWN  6/12/2171 14:00          URINE       1.0   \n","3                   OTHER  6/12/2171 14:00          URINE       1.0   \n","4  BLACK/AFRICAN AMERICAN  6/12/2171 14:00          URINE       1.0   \n","\n","                test_name                org_name             ab_name  \\\n","0  Blood Culture, Routine               CANCELLED          AMPICILLIN   \n","1           URINE CULTURE  GRAM POSITIVE BACTERIA          AMPICILLIN   \n","2           URINE CULTURE        ESCHERICHIA COLI          AMPICILLIN   \n","3           URINE CULTURE        ESCHERICHIA COLI           CEFAZOLIN   \n","4           URINE CULTURE        ESCHERICHIA COLI  TRIMETHOPRIM/SULFA   \n","\n","  dilution_text interpretation  \n","0           <=2              S  \n","1           <=2              S  \n","2           <=2              S  \n","3           <=4              S  \n","4           <=1              S  "],"text/html":["\n","  <div id=\"df-5e188ce4-eafe-4727-9007-1653a3e9a39b\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>subject_id</th>\n","      <th>gender</th>\n","      <th>anchor_age</th>\n","      <th>admittime</th>\n","      <th>ethnicity</th>\n","      <th>storetime</th>\n","      <th>spec_type_desc</th>\n","      <th>test_seq</th>\n","      <th>test_name</th>\n","      <th>org_name</th>\n","      <th>ab_name</th>\n","      <th>dilution_text</th>\n","      <th>interpretation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>10000048</td>\n","      <td>F</td>\n","      <td>23</td>\n","      <td>2139-09-26 14:16:00</td>\n","      <td>UNKNOWN</td>\n","      <td>3/16/2138 5:10</td>\n","      <td>BLOOD CULTURE</td>\n","      <td>1.0</td>\n","      <td>Blood Culture, Routine</td>\n","      <td>CANCELLED</td>\n","      <td>AMPICILLIN</td>\n","      <td>&lt;=2</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>10002723</td>\n","      <td>F</td>\n","      <td>0</td>\n","      <td>2123-10-07 23:56:00</td>\n","      <td>WHITE</td>\n","      <td>6/11/2135 21:02</td>\n","      <td>URINE</td>\n","      <td>1.0</td>\n","      <td>URINE CULTURE</td>\n","      <td>GRAM POSITIVE BACTERIA</td>\n","      <td>AMPICILLIN</td>\n","      <td>&lt;=2</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>10003939</td>\n","      <td>M</td>\n","      <td>0</td>\n","      <td>2147-01-14 09:00:00</td>\n","      <td>UNKNOWN</td>\n","      <td>6/12/2171 14:00</td>\n","      <td>URINE</td>\n","      <td>1.0</td>\n","      <td>URINE CULTURE</td>\n","      <td>ESCHERICHIA COLI</td>\n","      <td>AMPICILLIN</td>\n","      <td>&lt;=2</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>10004222</td>\n","      <td>M</td>\n","      <td>0</td>\n","      <td>2165-12-27 17:33:00</td>\n","      <td>OTHER</td>\n","      <td>6/12/2171 14:00</td>\n","      <td>URINE</td>\n","      <td>1.0</td>\n","      <td>URINE CULTURE</td>\n","      <td>ESCHERICHIA COLI</td>\n","      <td>CEFAZOLIN</td>\n","      <td>&lt;=4</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>10005325</td>\n","      <td>F</td>\n","      <td>0</td>\n","      <td>2122-08-28 08:48:00</td>\n","      <td>BLACK/AFRICAN AMERICAN</td>\n","      <td>6/12/2171 14:00</td>\n","      <td>URINE</td>\n","      <td>1.0</td>\n","      <td>URINE CULTURE</td>\n","      <td>ESCHERICHIA COLI</td>\n","      <td>TRIMETHOPRIM/SULFA</td>\n","      <td>&lt;=1</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5e188ce4-eafe-4727-9007-1653a3e9a39b')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-5e188ce4-eafe-4727-9007-1653a3e9a39b button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-5e188ce4-eafe-4727-9007-1653a3e9a39b');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":1}],"source":["import pandas as pd\n","\n","df = pd.read_csv(\"/content/microbiologydata.csv\")\n","df.head()"]},{"cell_type":"code","source":["df = df.drop(['Unnamed: 0'], axis = 1)\n","df = df.drop(['subject_id'], axis = 1)\n","df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6fmYK4bEufDF","outputId":"10404bde-fd5e-40df-f213-0c97d58dd93f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 112285 entries, 0 to 112284\n","Data columns (total 12 columns):\n"," #   Column          Non-Null Count   Dtype  \n","---  ------          --------------   -----  \n"," 0   gender          112285 non-null  object \n"," 1   anchor_age      112285 non-null  int64  \n"," 2   admittime       112285 non-null  object \n"," 3   ethnicity       112284 non-null  object \n"," 4   storetime       112284 non-null  object \n"," 5   spec_type_desc  112284 non-null  object \n"," 6   test_seq        112284 non-null  float64\n"," 7   test_name       112284 non-null  object \n"," 8   org_name        112284 non-null  object \n"," 9   ab_name         112284 non-null  object \n"," 10  dilution_text   112284 non-null  object \n"," 11  interpretation  112284 non-null  object \n","dtypes: float64(1), int64(1), object(10)\n","memory usage: 10.3+ MB\n"]}]},{"cell_type":"code","source":["# checking for dublicates\n","print(df.duplicated())\n","# remove duplicated\n","df.drop_duplicates(subset=None, keep='first', inplace=False, ignore_index=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"3UfmSlxtwFXE","outputId":"5d22e48c-5ebe-4c38-bda5-f4bf67e35fc7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0         False\n","1         False\n","2         False\n","3         False\n","4         False\n","          ...  \n","112280    False\n","112281    False\n","112282    False\n","112283    False\n","112284    False\n","Length: 112285, dtype: bool\n"]},{"output_type":"execute_result","data":{"text/plain":["       gender  anchor_age            admittime               ethnicity  \\\n","0           F          23  2139-09-26 14:16:00                 UNKNOWN   \n","1           F           0  2123-10-07 23:56:00                   WHITE   \n","2           M           0  2147-01-14 09:00:00                 UNKNOWN   \n","3           M           0  2165-12-27 17:33:00                   OTHER   \n","4           F           0  2122-08-28 08:48:00  BLACK/AFRICAN AMERICAN   \n","...       ...         ...                  ...                     ...   \n","112280      F          26  2180-11-10 05:18:00                   WHITE   \n","112281      F          77  2131-08-30 01:25:00                   WHITE   \n","112282      M          35  2152-03-29 00:00:00                   WHITE   \n","112283      M          38  2167-03-09 18:04:00  BLACK/AFRICAN AMERICAN   \n","112284      F          68          2119-09-18                      NaN   \n","\n","              storetime                           spec_type_desc  test_seq  \\\n","0        3/16/2138 5:10                            BLOOD CULTURE       1.0   \n","1       6/11/2135 21:02                                    URINE       1.0   \n","2       6/12/2171 14:00                                    URINE       1.0   \n","3       6/12/2171 14:00                                    URINE       1.0   \n","4       6/12/2171 14:00                                    URINE       1.0   \n","...                 ...                                      ...       ...   \n","112280  1/10/2153 14:35                         PERITONEAL FLUID       2.0   \n","112281  1/10/2153 14:35                         PERITONEAL FLUID       2.0   \n","112282   1/8/2153 10:48  FLUID RECEIVED IN BLOOD CULTURE BOTTLES       1.0   \n","112283  1/11/2153 12:32                                  ABSCESS       2.0   \n","112284              NaN                                      NaN       NaN   \n","\n","                       test_name                                 org_name  \\\n","0         Blood Culture, Routine                                CANCELLED   \n","1                  URINE CULTURE                   GRAM POSITIVE BACTERIA   \n","2                  URINE CULTURE                         ESCHERICHIA COLI   \n","3                  URINE CULTURE                         ESCHERICHIA COLI   \n","4                  URINE CULTURE                         ESCHERICHIA COLI   \n","...                          ...                                      ...   \n","112280             FLUID CULTURE  STREPTOCOCCUS ANGINOSUS (MILLERI) GROUP   \n","112281             FLUID CULTURE  STREPTOCOCCUS ANGINOSUS (MILLERI) GROUP   \n","112282  Fluid Culture in Bottles                    MIXED BACTERIAL FLORA   \n","112283             WOUND CULTURE                         ENTEROCOCCUS SP.   \n","112284                       NaN                                      NaN   \n","\n","                   ab_name dilution_text interpretation  \n","0               AMPICILLIN           <=2              S  \n","1               AMPICILLIN           <=2              S  \n","2               AMPICILLIN           <=2              S  \n","3                CEFAZOLIN           <=4              S  \n","4       TRIMETHOPRIM/SULFA           <=1              S  \n","...                    ...           ...            ...  \n","112280         CLINDAMYCIN           <=1              S  \n","112281          VANCOMYCIN           <=1              S  \n","112282        PENICILLIN G          0.25              S  \n","112283        PENICILLIN G          0.25              S  \n","112284                 NaN           NaN            NaN  \n","\n","[112285 rows x 12 columns]"],"text/html":["\n","  <div id=\"df-77fe587e-5da2-4d70-bc0d-9885e23723b1\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>gender</th>\n","      <th>anchor_age</th>\n","      <th>admittime</th>\n","      <th>ethnicity</th>\n","      <th>storetime</th>\n","      <th>spec_type_desc</th>\n","      <th>test_seq</th>\n","      <th>test_name</th>\n","      <th>org_name</th>\n","      <th>ab_name</th>\n","      <th>dilution_text</th>\n","      <th>interpretation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>F</td>\n","      <td>23</td>\n","      <td>2139-09-26 14:16:00</td>\n","      <td>UNKNOWN</td>\n","      <td>3/16/2138 5:10</td>\n","      <td>BLOOD CULTURE</td>\n","      <td>1.0</td>\n","      <td>Blood Culture, Routine</td>\n","      <td>CANCELLED</td>\n","      <td>AMPICILLIN</td>\n","      <td>&lt;=2</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>F</td>\n","      <td>0</td>\n","      <td>2123-10-07 23:56:00</td>\n","      <td>WHITE</td>\n","      <td>6/11/2135 21:02</td>\n","      <td>URINE</td>\n","      <td>1.0</td>\n","      <td>URINE CULTURE</td>\n","      <td>GRAM POSITIVE BACTERIA</td>\n","      <td>AMPICILLIN</td>\n","      <td>&lt;=2</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>M</td>\n","      <td>0</td>\n","      <td>2147-01-14 09:00:00</td>\n","      <td>UNKNOWN</td>\n","      <td>6/12/2171 14:00</td>\n","      <td>URINE</td>\n","      <td>1.0</td>\n","      <td>URINE CULTURE</td>\n","      <td>ESCHERICHIA COLI</td>\n","      <td>AMPICILLIN</td>\n","      <td>&lt;=2</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>M</td>\n","      <td>0</td>\n","      <td>2165-12-27 17:33:00</td>\n","      <td>OTHER</td>\n","      <td>6/12/2171 14:00</td>\n","      <td>URINE</td>\n","      <td>1.0</td>\n","      <td>URINE CULTURE</td>\n","      <td>ESCHERICHIA COLI</td>\n","      <td>CEFAZOLIN</td>\n","      <td>&lt;=4</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>F</td>\n","      <td>0</td>\n","      <td>2122-08-28 08:48:00</td>\n","      <td>BLACK/AFRICAN AMERICAN</td>\n","      <td>6/12/2171 14:00</td>\n","      <td>URINE</td>\n","      <td>1.0</td>\n","      <td>URINE CULTURE</td>\n","      <td>ESCHERICHIA COLI</td>\n","      <td>TRIMETHOPRIM/SULFA</td>\n","      <td>&lt;=1</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>112280</th>\n","      <td>F</td>\n","      <td>26</td>\n","      <td>2180-11-10 05:18:00</td>\n","      <td>WHITE</td>\n","      <td>1/10/2153 14:35</td>\n","      <td>PERITONEAL FLUID</td>\n","      <td>2.0</td>\n","      <td>FLUID CULTURE</td>\n","      <td>STREPTOCOCCUS ANGINOSUS (MILLERI) GROUP</td>\n","      <td>CLINDAMYCIN</td>\n","      <td>&lt;=1</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>112281</th>\n","      <td>F</td>\n","      <td>77</td>\n","      <td>2131-08-30 01:25:00</td>\n","      <td>WHITE</td>\n","      <td>1/10/2153 14:35</td>\n","      <td>PERITONEAL FLUID</td>\n","      <td>2.0</td>\n","      <td>FLUID CULTURE</td>\n","      <td>STREPTOCOCCUS ANGINOSUS (MILLERI) GROUP</td>\n","      <td>VANCOMYCIN</td>\n","      <td>&lt;=1</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>112282</th>\n","      <td>M</td>\n","      <td>35</td>\n","      <td>2152-03-29 00:00:00</td>\n","      <td>WHITE</td>\n","      <td>1/8/2153 10:48</td>\n","      <td>FLUID RECEIVED IN BLOOD CULTURE BOTTLES</td>\n","      <td>1.0</td>\n","      <td>Fluid Culture in Bottles</td>\n","      <td>MIXED BACTERIAL FLORA</td>\n","      <td>PENICILLIN G</td>\n","      <td>0.25</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>112283</th>\n","      <td>M</td>\n","      <td>38</td>\n","      <td>2167-03-09 18:04:00</td>\n","      <td>BLACK/AFRICAN AMERICAN</td>\n","      <td>1/11/2153 12:32</td>\n","      <td>ABSCESS</td>\n","      <td>2.0</td>\n","      <td>WOUND CULTURE</td>\n","      <td>ENTEROCOCCUS SP.</td>\n","      <td>PENICILLIN G</td>\n","      <td>0.25</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>112284</th>\n","      <td>F</td>\n","      <td>68</td>\n","      <td>2119-09-18</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>112285 rows × 12 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-77fe587e-5da2-4d70-bc0d-9885e23723b1')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-77fe587e-5da2-4d70-bc0d-9885e23723b1 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-77fe587e-5da2-4d70-bc0d-9885e23723b1');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":3}]},{"cell_type":"markdown","source":["# Descriptive Statistics"],"metadata":{"id":"kANwyXwry3fB"}},{"cell_type":"code","source":["# summary statistics\n","df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tlK99ey3y9fL","outputId":"3f4e39ad-810c-4cc8-e672-92592b4f3928"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          anchor_age       test_seq\n","count  382278.000000  382278.000000\n","mean       40.931804       1.196661\n","std        26.114457       0.471526\n","min         0.000000       1.000000\n","25%        22.000000       1.000000\n","50%        41.000000       1.000000\n","75%        62.000000       1.000000\n","max        91.000000      19.000000"],"text/html":["\n","  <div id=\"df-750d5393-bc8a-482f-a80a-52c430bdc3c1\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>anchor_age</th>\n","      <th>test_seq</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>382278.000000</td>\n","      <td>382278.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>40.931804</td>\n","      <td>1.196661</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>26.114457</td>\n","      <td>0.471526</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>22.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>41.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>62.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>91.000000</td>\n","      <td>19.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-750d5393-bc8a-482f-a80a-52c430bdc3c1')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-750d5393-bc8a-482f-a80a-52c430bdc3c1 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-750d5393-bc8a-482f-a80a-52c430bdc3c1');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":66}]},{"cell_type":"markdown","source":["# Statistical Tests"],"metadata":{"id":"l0oq8igT6Ll9"}},{"cell_type":"markdown","source":["Statistical T-test"],"metadata":{"id":"aCsalFDXAPBt"}},{"cell_type":"code","source":["# researchpy for t-test\n","!pip install researchpy"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MWsXN16NARrd","outputId":"0b902dd4-dc87-4292-a775-51981609a1b4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: researchpy in /usr/local/lib/python3.7/dist-packages (0.3.2)\n","Requirement already satisfied: statsmodels in /usr/local/lib/python3.7/dist-packages (from researchpy) (0.10.2)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from researchpy) (1.3.5)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from researchpy) (1.4.1)\n","Requirement already satisfied: patsy in /usr/local/lib/python3.7/dist-packages (from researchpy) (0.5.2)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from researchpy) (1.21.6)\n","Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas->researchpy) (2022.1)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas->researchpy) (2.8.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas->researchpy) (1.15.0)\n"]}]},{"cell_type":"code","source":["# filter data for t-test analysis\n","data_tt = df.filter(['gender', 'anchor_age', 'test_seq'])\n","data_tt.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YJGBtiWWArGh","outputId":"401b60cd-a0d2-4c26-fb62-4b785b2c7a99"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  gender  anchor_age  test_seq\n","0      F          23         1\n","1      F           0         1\n","2      M           0         1\n","3      M           0         1\n","4      F           0         1"],"text/html":["\n","  <div id=\"df-3865863f-8b9e-46f1-a0b0-b193a67577d6\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>gender</th>\n","      <th>anchor_age</th>\n","      <th>test_seq</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>F</td>\n","      <td>23</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>F</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>M</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>M</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>F</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3865863f-8b9e-46f1-a0b0-b193a67577d6')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-3865863f-8b9e-46f1-a0b0-b193a67577d6 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-3865863f-8b9e-46f1-a0b0-b193a67577d6');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":68}]},{"cell_type":"code","source":["import researchpy as rp\n","\n","# T-test for test_seq\n","rp.ttest(group1= data_tt['test_seq'][data_tt['gender'] == 'M'], group1_name= \"M\",\n","         group2= data_tt['test_seq'][data_tt['gender'] == 'F'], group2_name= \"F\")\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"maX8spaMXn7X","outputId":"acb42e93-744d-4197-9a35-853027bb9b14"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(   Variable         N      Mean        SD        SE  95% Conf.  Interval\n"," 0         M  182571.0  1.197901  0.474748  0.001111   1.195723  1.200079\n"," 1         F  199707.0  1.195526  0.468560  0.001048   1.193471  1.197581\n"," 2  combined  382278.0  1.196661  0.471526  0.000763   1.195166  1.198155,\n","           Independent t-test      results\n"," 0      Difference (M - F) =        0.0024\n"," 1      Degrees of freedom =   382276.0000\n"," 2                       t =        1.5553\n"," 3   Two side test p value =        0.1199\n"," 4  Difference < 0 p value =        0.9401\n"," 5  Difference > 0 p value =        0.0599\n"," 6               Cohen's d =        0.0050\n"," 7               Hedge's g =        0.0050\n"," 8           Glass's delta =        0.0050\n"," 9             Pearson's r =        0.0025)"]},"metadata":{},"execution_count":69}]},{"cell_type":"code","source":["# T-test for anchor_age\n","rp.ttest(group1= data_tt['anchor_age'][data_tt['gender'] == 'M'], group1_name= \"M\",\n","         group2= data_tt['anchor_age'][data_tt['gender'] == 'F'], group2_name= \"F\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Dvuu4IECfht3","outputId":"72ea51d6-1da1-4e20-f619-78511d0431cb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(   Variable         N       Mean         SD        SE  95% Conf.   Interval\n"," 0         M  182571.0  40.763391  26.023629  0.060905  40.644019  40.882763\n"," 1         F  199707.0  41.085766  26.196333  0.058620  40.970872  41.200659\n"," 2  combined  382278.0  40.931804  26.114457  0.042237  40.849021  41.014586,\n","           Independent t-test      results\n"," 0      Difference (M - F) =       -0.3224\n"," 1      Degrees of freedom =   382276.0000\n"," 2                       t =       -3.8125\n"," 3   Two side test p value =        0.0001\n"," 4  Difference < 0 p value =        0.0001\n"," 5  Difference > 0 p value =        0.9999\n"," 6               Cohen's d =       -0.0123\n"," 7               Hedge's g =       -0.0123\n"," 8           Glass's delta =       -0.0124\n"," 9             Pearson's r =        0.0062)"]},"metadata":{},"execution_count":70}]},{"cell_type":"markdown","source":["# Normality test"],"metadata":{"id":"C7Fcf_RciAJA"}},{"cell_type":"code","source":["from scipy.stats import normaltest\n","\n","data_nom = df.copy()\n","# convert to numerical\n","data_nom = data_nom.astype('category')\n","wd_column = data_nom.select_dtypes(['category']).columns\n","data_nom[wd_column] = data_nom[wd_column].apply(lambda x: x.cat.codes)\n","print(data_nom.info())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l1QyQI5OiBHJ","outputId":"c4c27851-34db-4b22-f5a1-83ae49b8d0e8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 382278 entries, 0 to 382277\n","Data columns (total 12 columns):\n"," #   Column          Non-Null Count   Dtype\n","---  ------          --------------   -----\n"," 0   gender          382278 non-null  int8 \n"," 1   anchor_age      382278 non-null  int8 \n"," 2   admittime       382278 non-null  int32\n"," 3   ethnicity       382278 non-null  int8 \n"," 4   storetime       382278 non-null  int32\n"," 5   spec_type_desc  382278 non-null  int8 \n"," 6   test_seq        382278 non-null  int8 \n"," 7   test_name       382278 non-null  int8 \n"," 8   org_name        382278 non-null  int16\n"," 9   ab_name         382278 non-null  int8 \n"," 10  dilution_text   382278 non-null  int8 \n"," 11  interpretation  382278 non-null  int8 \n","dtypes: int16(1), int32(2), int8(9)\n","memory usage: 6.9 MB\n","None\n"]}]},{"cell_type":"code","source":["# normality test\n","from scipy.stats import normaltest\n","\n","stat, p = normaltest(data_nom)\n","print('Statistics = %.3f, p = %.3f' % (stat.all(), p.all()))\n","# interpret results\n","alpha = 0.05\n","if p.all() > alpha:\n","    print('HIV Mortality data looks Gaussian (fail to reject H0)')\n","else:\n","    print('HIV Mortality data does not look Gaussian (reject H0)')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K6CcXdDDiX72","outputId":"48970ff5-92fd-4395-ce89-d157f482d034"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Statistics = 1.000, p = 0.000\n","HIV Mortality data does not look Gaussian (reject H0)\n"]}]},{"cell_type":"code","source":["# using the shapiro package\n","\n","from scipy.stats import shapiro\n","# normality test\n","stat, p = shapiro(data_nom)\n","print('Statistics=%.3f, p=%.3f' % (stat, p))\n","# interpret\n","alpha = 0.05\n","if p > alpha:\n","\tprint('Data looks Gaussian (fail to reject H0)')\n","else:\n","\tprint('Data does not look Gaussian (reject H0)')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kp5Li-DDjbH-","outputId":"2373de0d-e21a-4299-99bc-53a8d8ab474f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Statistics=0.350, p=0.000\n","Data does not look Gaussian (reject H0)\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/scipy/stats/morestats.py:1676: UserWarning: p-value may not be accurate for N > 5000.\n","  warnings.warn(\"p-value may not be accurate for N > 5000.\")\n"]}]},{"cell_type":"markdown","source":["# Correlation statistical test"],"metadata":{"id":"OPuE4V39mgk5"}},{"cell_type":"code","source":["from scipy.stats import pearsonr\n","\n","corr_data = df.copy()\n","\n","seq = corr_data['test_seq']\n","anc = corr_data['anchor_age']\n","# calculate Pearson's correlation\n","corr, _ = pearsonr(seq, anc)\n","print('Pearsons correlation: %.4f' % corr)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2DT1Zun_mjty","outputId":"823a50db-67e8-42ef-cc47-378e3588e897"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Pearsons correlation: 0.0026\n"]}]},{"cell_type":"markdown","source":["# Fisher's Statistical Test"],"metadata":{"id":"jCMnc8xxlk_t"}},{"cell_type":"code","source":["# filter data for t-test analysis\n","df_fisher = df.filter(['gender', 'test_seq', 'anchor_age'])\n","# group gender and test_seq\n","df_seq = df_fisher.groupby([\"gender\"]).test_seq.sum().reset_index()\n","# group gender and anchor_age\n","df_anc = df_fisher.groupby([\"gender\"]).anchor_age.sum().reset_index()\n","# join the two dataframe\n","df_fsh = pd.concat([df_seq, df_anc['anchor_age']], axis=1, join='inner')\n","display(df_fsh)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LiKIkKUqlqSD","outputId":"ea4a0946-9410-4267-802c-19d24389c410"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["  gender  test_seq  anchor_age\n","0      F    238755     8205115\n","1      M    218702     7442213"],"text/html":["\n","  <div id=\"df-0b448ecd-0cda-4a95-bdeb-58b214064076\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>gender</th>\n","      <th>test_seq</th>\n","      <th>anchor_age</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>F</td>\n","      <td>238755</td>\n","      <td>8205115</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>M</td>\n","      <td>218702</td>\n","      <td>7442213</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0b448ecd-0cda-4a95-bdeb-58b214064076')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-0b448ecd-0cda-4a95-bdeb-58b214064076 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-0b448ecd-0cda-4a95-bdeb-58b214064076');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}}]},{"cell_type":"code","source":["# drop gender column\n","df_fishers = df_fsh.iloc[:, 1:]\n","df_fishers"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bS9W_9y2mKv8","outputId":"d71459fb-844b-4df3-fda9-25888722630c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   test_seq  anchor_age\n","0    238755     8205115\n","1    218702     7442213"],"text/html":["\n","  <div id=\"df-885f76cb-9f3b-41a1-b62e-cdad752ba59b\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>test_seq</th>\n","      <th>anchor_age</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>238755</td>\n","      <td>8205115</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>218702</td>\n","      <td>7442213</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-885f76cb-9f3b-41a1-b62e-cdad752ba59b')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-885f76cb-9f3b-41a1-b62e-cdad752ba59b button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-885f76cb-9f3b-41a1-b62e-cdad752ba59b');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":76}]},{"cell_type":"code","source":["# importing packages\n","import scipy.stats as stats\n","\n","# perfom fisher's test\n","odd_ratio, p_value = stats.fisher_exact(df_fishers)\n","print('odd ratio is : ' + str(odd_ratio))\n","print('p value is : ' + str(p_value))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tH1svSS_mT9W","outputId":"6409afe5-ff74-4915-9442-d9244689b0bc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["odd ratio is : 0.9901868260527197\n","p value is : 0.0010277462590697756\n"]}]},{"cell_type":"markdown","source":["# Multiple Classification Models"],"metadata":{"id":"SfJBO02C-BqG"}},{"cell_type":"markdown","source":["Importing packages for analysis"],"metadata":{"id":"odarXAcC-tzm"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn import preprocessing\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","from matplotlib import pyplot as plt\n","import seaborn as sns\n","from sklearn import metrics\n","import numpy as np\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.naive_bayes import GaussianNB\n","from sklearn.ensemble import GradientBoostingClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from xgboost import XGBClassifier\n","from sklearn.metrics import confusion_matrix, accuracy_score"],"metadata":{"id":"wGySCBWq-HDH"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 1.\tLogistic Regression model"],"metadata":{"id":"aA7XQjBfAFgy"}},{"cell_type":"code","source":["# create a new data frame\n","lrm_data = df.copy()\n","# change to numeric\n","lrm_data = lrm_data.astype('category')\n","wd_column = lrm_data.select_dtypes(['category']).columns\n","lrm_data[wd_column] = lrm_data[wd_column].apply(lambda x: x.cat.codes)\n","# splitting the data to training and testing\n","y = lrm_data['interpretation']\n","x = lrm_data.drop(['interpretation'], axis = 1)\n","X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.20, random_state=5)\n","# scalling the data\n","scaler = preprocessing.StandardScaler().fit(X_train)\n","X_train_scaled = scaler.transform(X_train)"],"metadata":{"id":"49tzemMGAGzV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Model building and training"],"metadata":{"id":"Q2_CgPZZAxTk"}},{"cell_type":"code","source":["# building the model\n","model = LogisticRegression()\n","# train model\n","model.fit(X_train_scaled, y_train)\n","# Evaluating the model\n","acc = model.score(X_train_scaled, y_train)\n","print(\"The Accuracy is {}\".format(acc*100))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zR6TxotUA1jO","outputId":"45cbff88-8dd7-4e72-cf9a-b4ba668c0c14"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The Accuracy is 94.54355801740883\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n"]}]},{"cell_type":"markdown","source":["Evaluating the model"],"metadata":{"id":"HPtK6l9XBAk6"}},{"cell_type":"code","source":["y_pred = model.predict(X_test)\n","y_pred"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jAWKWSseBYyj","outputId":"fd53e3be-1eaf-4ad0-fd5c-1b285bceaf81"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/base.py:444: UserWarning: X has feature names, but LogisticRegression was fitted without feature names\n","  f\"X has feature names, but {self.__class__.__name__} was fitted without\"\n"]},{"output_type":"execute_result","data":{"text/plain":["array([1, 1, 2, ..., 2, 1, 2], dtype=int8)"]},"metadata":{},"execution_count":81}]},{"cell_type":"code","source":["print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\n","print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\n","print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FFI6zregCvA1","outputId":"c54bcb85-ee11-4853-c4be-c00e2e224f19"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Absolute Error: 1.3435439991629172\n","Mean Squared Error: 2.214947159150361\n","Root Mean Squared Error: 1.488269854277228\n"]}]},{"cell_type":"code","source":["# display actual and predicted values\n","pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"PkoE4xVgFLR-","outputId":"71cabccb-7ab7-4aeb-aff4-07b06e6bf389"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        Actual  Predicted\n","275220       3          1\n","254691       2          1\n","266228       3          2\n","138511       3          1\n","74232        3          2\n","...        ...        ...\n","352954       3          1\n","211669       2          2\n","334045       2          2\n","321866       3          1\n","276437       2          2\n","\n","[76456 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-ec7f4492-957e-4285-8ec0-c0e72ce685a4\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Actual</th>\n","      <th>Predicted</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>275220</th>\n","      <td>3</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>254691</th>\n","      <td>2</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>266228</th>\n","      <td>3</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>138511</th>\n","      <td>3</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>74232</th>\n","      <td>3</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>352954</th>\n","      <td>3</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>211669</th>\n","      <td>2</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>334045</th>\n","      <td>2</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>321866</th>\n","      <td>3</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>276437</th>\n","      <td>2</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>76456 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ec7f4492-957e-4285-8ec0-c0e72ce685a4')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-ec7f4492-957e-4285-8ec0-c0e72ce685a4 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-ec7f4492-957e-4285-8ec0-c0e72ce685a4');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":83}]},{"cell_type":"markdown","source":["# 2. Naives Bayes Classifier Model"],"metadata":{"id":"6MTqQUfoCmtu"}},{"cell_type":"code","source":["nbc_data = df.copy()\n","# change to numeric\n","nbc_data = nbc_data.astype('category')\n","wd_column = nbc_data.select_dtypes(['category']).columns\n","nbc_data[wd_column] = nbc_data[wd_column].apply(lambda x: x.cat.codes)\n","# split the data to training and testing\n","y = nbc_data['interpretation']\n","x = nbc_data.drop(['interpretation'], axis = 1)\n","\n","X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.20, random_state = 0)"],"metadata":{"id":"-UPR7CBuC0fJ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Data variable scaling"],"metadata":{"id":"nKVwcHQDDCZK"}},{"cell_type":"code","source":["sc = StandardScaler()\n","X_train = sc.fit_transform(X_train)\n","X_test = sc.transform(X_test)\n","# training model\n","model = GaussianNB()\n","model.fit(X_train, y_train)"],"metadata":{"id":"4zluPsgXDEZO","colab":{"base_uri":"https://localhost:8080/"},"outputId":"1a4dce67-b821-4b36-b4c1-2ac5b09a0981"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["GaussianNB()"]},"metadata":{},"execution_count":85}]},{"cell_type":"markdown","source":["Carrying out predictions"],"metadata":{"id":"oxTOUEUdDdAZ"}},{"cell_type":"code","source":["# predicting\n","y_pred  =  model.predict(X_test)\n","y_pred"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AN2FS49MDfIT","outputId":"a61edadf-0eff-4076-c8f4-981ccfc97b79"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([3, 3, 3, ..., 3, 3, 3], dtype=int8)"]},"metadata":{},"execution_count":86}]},{"cell_type":"markdown","source":["Model evaluation"],"metadata":{"id":"JL-j19i0Dl9r"}},{"cell_type":"code","source":["cmt = confusion_matrix(y_test, y_pred)\n","acc = accuracy_score(y_test,y_pred)\n","print('Confusion matrix: ', cmt)\n","print('Accuracy: ', acc)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uPIEu0CSDn0N","outputId":"cfb1a93f-0e2d-4061-f15e-c5faad49fb8a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion matrix:  [[  496    21  1458]\n"," [  318 11212  3610]\n"," [  833  1336 57172]]\n","Accuracy:  0.9009103275086324\n"]}]},{"cell_type":"code","source":["# display actual and predicted values\n","pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5j0fgs7BFRQd","outputId":"2a83f1db-26f7-4e4a-b325-a6aa8c608fd8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        Actual  Predicted\n","268151       3          3\n","281678       3          3\n","9429         3          3\n","184209       0          0\n","26377        3          2\n","...        ...        ...\n","146676       3          3\n","224994       2          2\n","266123       3          3\n","302724       3          3\n","200160       3          3\n","\n","[76456 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-4df10b94-67c8-4749-a8a0-f1b388bb874a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Actual</th>\n","      <th>Predicted</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>268151</th>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>281678</th>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>9429</th>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>184209</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>26377</th>\n","      <td>3</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>146676</th>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>224994</th>\n","      <td>2</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>266123</th>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>302724</th>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>200160</th>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>76456 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4df10b94-67c8-4749-a8a0-f1b388bb874a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-4df10b94-67c8-4749-a8a0-f1b388bb874a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-4df10b94-67c8-4749-a8a0-f1b388bb874a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":88}]},{"cell_type":"markdown","source":["# 3. Decision Tree Classifier"],"metadata":{"id":"LrvZAQmbNjFc"}},{"cell_type":"code","source":["dtc_data = df.copy()\n","# change to numeric\n","dtc_data = dtc_data.astype('category')\n","wd_column = dtc_data.select_dtypes(['category']).columns\n","dtc_data[wd_column] = dtc_data[wd_column].apply(lambda x: x.cat.codes)\n","# split the data to training and testing\n","y = dtc_data['interpretation']\n","x = dtc_data.drop(['interpretation'], axis = 1)\n","X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.30, random_state = 7)"],"metadata":{"id":"PC-CcLZvNz27"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","# Create Decision Tree classifer object\n","model = DecisionTreeClassifier()\n","# Train Decision Tree Classifer\n","model = model.fit(X_train,y_train)\n","# doing prediction\n","#Predict the response for test dataset\n","y_pred = model.predict(X_test)\n","y_pred"],"metadata":{"id":"I8696toONIzA","colab":{"base_uri":"https://localhost:8080/"},"outputId":"e5538e6c-d2ee-40fe-9ffe-36f4f2de8714"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([2, 3, 3, ..., 0, 2, 2], dtype=int8)"]},"metadata":{},"execution_count":90}]},{"cell_type":"markdown","source":["Model evaluation"],"metadata":{"id":"r28PdSqMG4m3"}},{"cell_type":"code","source":["# Model Accuracy, how often is the classifier correct?\n","print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\n","print(\"Accuracy score (training): {0:.3f}\".format(model.score(X_train, y_train)))\n","print(\"Accuracy score (Testing): {0:.3f}\".format(model.score(X_test, y_test)))\n","print(classification_report(y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"moQYSqlBNPuG","outputId":"9f388253-b9ba-4a17-df48-ee48fb7872f5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.9868246660388545\n","Accuracy score (training): 1.000\n","Accuracy score (Testing): 0.987\n","              precision    recall  f1-score   support\n","\n","           0       0.90      0.89      0.89      2941\n","           2       0.97      0.97      0.97     22782\n","           3       0.99      0.99      0.99     88961\n","\n","    accuracy                           0.99    114684\n","   macro avg       0.95      0.95      0.95    114684\n","weighted avg       0.99      0.99      0.99    114684\n","\n"]}]},{"cell_type":"code","source":["# display actual and predicted values\n","pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"z05RBbRMOTfT","outputId":"2c629c9b-11a8-4c31-bfef-d991c717b8f4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        Actual  Predicted\n","209032       2          2\n","165746       3          3\n","329998       3          3\n","269067       3          3\n","143268       3          3\n","...        ...        ...\n","381100       3          3\n","68967        3          3\n","174367       0          0\n","88347        2          2\n","140088       2          2\n","\n","[114684 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-e6136cb7-1e06-44a6-93a5-1aed71f6d856\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Actual</th>\n","      <th>Predicted</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>209032</th>\n","      <td>2</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>165746</th>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>329998</th>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>269067</th>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>143268</th>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>381100</th>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>68967</th>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>174367</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>88347</th>\n","      <td>2</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>140088</th>\n","      <td>2</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>114684 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e6136cb7-1e06-44a6-93a5-1aed71f6d856')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-e6136cb7-1e06-44a6-93a5-1aed71f6d856 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-e6136cb7-1e06-44a6-93a5-1aed71f6d856');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":92}]},{"cell_type":"markdown","source":["# 4.\tRandom Forest Classifier Model"],"metadata":{"id":"4DfLRAx7_wLQ"}},{"cell_type":"code","source":["rfm_data = df.copy()\n","# change to numeric\n","rfm_data = rfm_data.astype('category')\n","wd_column = rfm_data.select_dtypes(['category']).columns\n","rfm_data[wd_column] = rfm_data[wd_column].apply(lambda x: x.cat.codes)\n","# split the data to training and testing\n","y = rfm_data['interpretation']\n","x = rfm_data.drop(['interpretation'], axis = 1)\n","X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.30, random_state=5)\n","\n","#Create a Gaussian Classifier\n","model = RandomForestClassifier(n_estimators=60)\n","#Train the model\n","model.fit(X_train,y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Iotiyea2_xBJ","outputId":"477182b5-0e43-41b5-d291-4f6d857d3961"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(n_estimators=60)"]},"metadata":{},"execution_count":93}]},{"cell_type":"code","source":["# predict the test data\n","y_pred = model.predict(X_test)\n","y_pred"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OtoFDRl0B6Ol","outputId":"c3fb8b3b-6105-4980-a7aa-5f93bb610858"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([3, 2, 3, ..., 2, 3, 3], dtype=int8)"]},"metadata":{},"execution_count":94}]},{"cell_type":"markdown","source":["Model evaluation"],"metadata":{"id":"K6xsKkFYCFyH"}},{"cell_type":"code","source":["# Accuracy of the Model\n","print(\"Accuracy score:\",metrics.accuracy_score(y_test, y_pred))\n","# model evaluation\n","print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\n","print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\n","print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FcciC0DNCHbO","outputId":"20a896d8-3ac5-421b-ad29-c2a88cc89d51"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy score: 0.9880105332914791\n","Mean Absolute Error: 0.01961912734121586\n","Mean Squared Error: 0.040336925813539815\n","Root Mean Squared Error: 0.2008405482305299\n"]}]},{"cell_type":"code","source":["# display actual and predicted values\n","pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"VEsDVFF7CRTk","outputId":"16d409fa-57aa-413b-9697-ac074371efd3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        Actual  Predicted\n","275220       3          3\n","254691       2          2\n","266228       3          3\n","138511       3          3\n","74232        3          3\n","...        ...        ...\n","29677        3          3\n","26064        3          3\n","46741        2          2\n","31359        3          3\n","73913        3          3\n","\n","[114684 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-0beb6ba0-c8e5-4369-a87a-5283fc8ba9bd\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Actual</th>\n","      <th>Predicted</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>275220</th>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>254691</th>\n","      <td>2</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>266228</th>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>138511</th>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>74232</th>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>29677</th>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>26064</th>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>46741</th>\n","      <td>2</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>31359</th>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>73913</th>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>114684 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0beb6ba0-c8e5-4369-a87a-5283fc8ba9bd')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-0beb6ba0-c8e5-4369-a87a-5283fc8ba9bd button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-0beb6ba0-c8e5-4369-a87a-5283fc8ba9bd');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":96}]},{"cell_type":"markdown","source":["# 5. XGBoost Classifier"],"metadata":{"id":"uVfxuPFzLtH_"}},{"cell_type":"code","source":["xgb_data = df.copy()\n","# change to numeric\n","xgb_data = xgb_data.astype('category')\n","wd_column = xgb_data.select_dtypes(['category']).columns\n","xgb_data[wd_column] = xgb_data[wd_column].apply(lambda x: x.cat.codes)\n","# split the data to training and testing\n","y = xgb_data['interpretation']\n","x = xgb_data.drop(['interpretation'], axis = 1)\n","X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.30, random_state = 7)"],"metadata":{"id":"Yu7O7lXDMHwc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = XGBClassifier()\n","model.fit(X_train, y_train)\n","score = model.score(X_test, y_test)\n","print(score)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Xfc_ojV4Luea","outputId":"0d51c7bb-850d-4247-a74e-f3295f4e4ffe"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.9756872291159532\n"]}]},{"cell_type":"code","source":["y_pred = model.predict(X_test)\n","y_pred"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9-95be1zMTUW","outputId":"d692ad05-9fb9-421d-a5f8-d14333700ed3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([3, 3, 3, ..., 2, 3, 2], dtype=int8)"]},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","source":["Evaluate the model"],"metadata":{"id":"2z-uF54KFvGT"}},{"cell_type":"code","source":["print(\"Accuracy score (training): {0:.3f}\".format(model.score(X_train, y_train)))\n","print(\"Accuracy score (Testing): {0:.3f}\".format(model.score(X_test, y_test)))\n","print(classification_report(y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kdndjk1OMchQ","outputId":"a5baa45f-20e0-4f06-c700-ed6d76a60032"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy score (training): 0.977\n","Accuracy score (Testing): 0.976\n","              precision    recall  f1-score   support\n","\n","          -1       0.00      0.00      0.00         1\n","           0       0.88      0.81      0.85       869\n","           2       0.99      0.92      0.95      6832\n","           3       0.98      1.00      0.99     25984\n","\n","    accuracy                           0.98     33686\n","   macro avg       0.71      0.68      0.70     33686\n","weighted avg       0.98      0.98      0.98     33686\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"code","source":["# display actual and predicted values\n","pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"9bIfk_qgMjRM","outputId":"44d83dde-91ee-44cf-c775-132ece73df9c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        Actual  Predicted\n","31945        3          3\n","109210       3          3\n","34002        3          3\n","96140        3          3\n","51802        3          3\n","...        ...        ...\n","72777        3          3\n","25638        3          3\n","21529        2          2\n","24796        3          3\n","26397        2          2\n","\n","[33686 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-acf6abcc-445f-4b75-9874-a08724938716\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Actual</th>\n","      <th>Predicted</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>31945</th>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>109210</th>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>34002</th>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>96140</th>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>51802</th>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>72777</th>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>25638</th>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>21529</th>\n","      <td>2</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>24796</th>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>26397</th>\n","      <td>2</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>33686 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-acf6abcc-445f-4b75-9874-a08724938716')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-acf6abcc-445f-4b75-9874-a08724938716 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-acf6abcc-445f-4b75-9874-a08724938716');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","source":["# Data Visualization"],"metadata":{"id":"wkSJjwNTOeIk"}},{"cell_type":"markdown","source":["Importing required libraries"],"metadata":{"id":"-NncHjYjO8Xx"}},{"cell_type":"code","source":["from matplotlib import pyplot as plt\n","import seaborn as sns"],"metadata":{"id":"7B4s1CRxPAts"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 1. Histogram"],"metadata":{"id":"APYn7wBajuzG"}},{"cell_type":"code","source":["# histogram of total_bills\n","plt.hist(df['anchor_age'])\n","plt.title(\"Age distribution for antibiotic resistance\")\n","# Adding the legends\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":281},"id":"mMqT1UHfjxbT","outputId":"afc9248d-a907-4f5a-a9c2-017d71cec157"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["# 2. Bar plot"],"metadata":{"id":"L7TK5SnlkSr9"}},{"cell_type":"code","source":["# prepare data\n","df_v = df.copy()\n","df_v['gender'].replace([0,1],['Female','Male'],inplace=True)"],"metadata":{"id":"qxyjBBzxmOLm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_vis = df.groupby('gender')['anchor_age'].sum().to_frame().reset_index()\n","#Creating the column plot\n","plt.bar(df_vis['gender'],df_vis['anchor_age'],color = ['#0000FF','#228B22','#800000'])\n","#Adding the aesthetics\n","plt.title('Anchor age based on gender')\n","plt.xlabel('GENDER')\n","plt.ylabel('ANCHOR AGE')\n","#Show the plot\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"6epSPlh8kUhF","outputId":"de52d991-62a7-4074-d83a-b33948c2e6e4"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["# 3. Heatmap"],"metadata":{"id":"YJdkmecyOktv"}},{"cell_type":"code","source":["heatmap_data = df.copy()\n","# change to numeric\n","heatmap_data = heatmap_data.astype('category')\n","wd_column = heatmap_data.select_dtypes(['category']).columns\n","heatmap_data[wd_column] = heatmap_data[wd_column].apply(lambda x: x.cat.codes)\n","plt.figure(figsize = (38,16))\n","sns.heatmap(heatmap_data.corr(), annot = True)\n","plt.savefig('heatmap.png')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":566},"id":"qnMSGJsZOnbr","outputId":"a6cb1199-97b2-476c-af40-bd17b61e67de"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 2736x1152 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]}]}